1、什么是js，如何编写以及如调试
2、什么是变量*****
3、什么是数据类型*****

什么是js：
	前端三大语言：
		HTML:用来编写网页结构和内容
		CSS:美化样式
		JavaScript:负责程序交互
			交互：用户操作，程序响应返回处理结果
			js运行计算机引擎
			解释执行：从上到下逐行读取
	js的发展史：
		网景Netscape：
			1995：LiveScript--JavaScript
				Java：
				微软 JScript
			1996：JavaScript1.1-ECMA
					ECMAScript-js核心语法

			1999：W3C-DOM标准：
				BOM：
			2004：Mozilla
			犀牛书 望远镜
		js运行环境：
			运行于浏览器内核中的js解释器
			Node.js
		how:
			1、在控制台编译js脚本
				Console：控制台
				console . log("hello world")
				控制台    的  控制台提供一种方法：接受一个字符串参数并在控制台进行打印
			2、单独的js文件 脚本-不需要预编译
			3、在元素事件处理中写		
		js程序出错：想出现的效果没出来
		bug：错误
		debug：解决错误
		
变量：
	what：内存中存储一个数据的空间，再起一个名字。
	when：在程序中一切数据都需要先用变量保存，再处理
	how：声明	赋值		取值
		声明：在内存中创建一个变量
		var 变量名；
		命名规则：
			1、不能以数字开头；
			2、不能使用保留字；
			3、见名知意；
			4、驼峰式命名：bannerList
		赋值：将数据存入变量中
			变量名 = 数据 ；
		取值：在程序中任何一个地方调用变量名等效于使用变量中存储的数据
		特殊情况：
			1、为未声明过的变量赋值,不会出错
			2、为未声明过的变量取值， ReferenceError:未定义（找不到对象）
			3、为声明过未赋值变量取值：undefined
			4、声明提前问题：
常量：一但声明创建不可改变的量
	
数据类型：内存中存储不同数据的存储格式
	原始类型：值保存在变量本地的数据类型
	Number String Boolean Null undefined
	1、Number:数字 不加引号
		一般用来进行算数运算或者比较大小
		所占空间:64位2进制保存
				64bit = 8字节
				1G = 1024 MB
				1MB = 1024KB
				1KB = 1024bytes
				1B=8bit
		计算机舍入误差：
	2、String：字符串，一串字符的序列 加“”
		when：文字、1用来显示的数字
		所占空间：js程序中每个字符都是用unicode表示
			unicode：全球主要语言中每一个字符都给了一个序列号	
			“hello 世界”	
	3、Boolean布尔类型：
		true、false
	引用类型：值不保存在变量本地的数据类型
1、数据类型转换
2、运算符和表达式

1、数据类型转换
	js是一门弱类编程语言：
		1、声明变量的时候，不需要定义存储的数据类型
		2、赋值时候动态改变变量数据类型
		3、运算时，js根据需要会动态转变数据类型
	1、隐试转换：不需要程序员干预，js自动完成
		在算数计算中，一切类型都隐试转换成number
		字符串 参与的+运算 字符串拼接
		表达式：由数据、变量、运算符组成的公式
			从左到右两两执行
			永远有运行结果
			true--》1  false--》0
		NaN not a number
			
	2、强制转换：程序员主动调用一些方法，对数据类型转换
		1、任意类型-->String
			var str = X.toString()
			String(X)--隐试转换原型
		2、任意类型-->number
			Number(X)--隐试转换原型
				一般用由纯数字组成的字符串转数字：
			parseInt(str)：从第一个字符开始依次读取
				碰到第一个非数字的字符就停止读取
				会自动调过开头空格
			Number 和 parseInt
		3、任意类型-->Boolean:
			Boolean(X)
			5个值转布尔是false："" NaN  null undefined 0;
			
		快速转换：
			快速转换String X+""
			快速转换Boolean !!X

2、运算符和表达式：
	程序：让计算机按照人的想法去执行任务
	运算符：程序模拟人的思维运算或判断的符号
	表达式：由数据、变量、运算符组成的公式；
	1、算数运算
		+ - * / % ++ --
		%(模运算)
		n%m n/m取余数
			判断是否整除
			保证运算结果不超过某个数
		++递增  --递减
		n++--> n= n+1
		++n:表达式返回n的新值
		n++：表达式返回n的旧值
	2、关系运算
		> < >= <= == === !=
		将两个值作比较-->true/false
		默认将所有类型转成数字再作比较
		特：
			1、如果参与比较的两个元素都是字符串
			2、NaN：不大于 不小于 不等于任何值（包括它本身）
					!=
					isNaN(num)专门判断num是不是NaN
			3、undefined和null
				Number(undefined)=NaN
				Number(null)=0
	3、逻辑运算
		&& || !
		综合多个关系运算得出结论
		&&：一假则假
		||：一真则真
		逻辑短路：在逻辑运算中，只要前一个条件就已经可以得出结论，不在执行后续条件
	4、位运算
		>> <<
		2进制
		左移<<
		右移>>
	5、扩展运算
		+= -= *= /= %=
		n+=1 -->n=n+1
		n+=n -->n=n+n
	6、三目运算

函数：封装一项专门任务步骤清单的代码段，并且起一个名字
when
how 声明		定义		调用
声明并定义一个函数 
		function 函数名 ([参数变量列表]) {
			函数体：步骤清单；
			[return 返回值]
		}
调用：在任何位置 函数名([参数变量列表]);
函数参数：专门接受传入函数内数据的变量
when：当一个函数必须某些数据才可以正常执行
why：参数让函数更加灵活
返回值：函数调用以后返回的执行结果
创建一个变量：var 变量 = 函数名（）

变量的作用域：
	2、	
		1、全局作用域：一个变量可以再程序的任何位置被访问
			1、直接在函数外声明变量
				window
			2、给未声明变量赋值时 会自动在全局创建同名的全局变量
		
		2、局部作用域：变量仅在函数调用的时候被访问
			1、在函数内部定义或声明的变量
			2、参数变量
	函数定义调用：
		1、声明定义：
			window创建一个函数名变量
			window外创建函数定义对象
			在函数名变量中保存了函数名地址
		2、调用时：创建局部变量
		3、在调用过程中：
			如果局部有、不用全局
			如果局部没有、用全局
			如果局部全局都没有 报错
		4、调用结束时 释放局部变量
	声明提前：
		在程序执行或函数被调用之前
		将var声明的变量和function声明的函数
		提前到当前作用域下的顶部集中创建
		赋值留在原地
	函数：按值传递
		js中无论是变量赋值还是变量传递参数时，都是将变量中值赋值一个副本给对方
		
1、Function对象
	重载
	内存中函数对象
	匿名函数
	闭包
2、错误处理

1、arguments对象：
	重载：程序中定义多个同名参数不同函数
		当调用者调用时 不必区分每个函数参数
		执行时动态选择每个函数执行
	arguments：函数对象内，自动创建接收所有参数的类数组对象
	arguments[i]:
	arguments.length:
2、函数对象
	1、创建函数对象：3种
		1、声明方式：function 函数名(参数列表){函数体;return 返回值}
		2、函数直接量
			var 函数名 = function(参数列表){函数体;return 返回值}
		3、使用new创建函数类型对象
			var 函数名 = new Function("参数1","参数2",..."函数体")
			
		function fun(a,b){return a-b}
		var fun = function(a,b){return a-b}
		var fun = new Function(a,b,return a-b);
		var fun = new Function('a','b','return a-b');
	2、内存中函数对象
		1、创建函数对象：
			函数对象
			作用域链对象：保存了函数对象可用的变量位置的对象
				每个函数都会指向自己的作用域链
		2、函数调用时
			创建一个新的对象
			活动对象：专门保存局部变量的对象
		3、函数调用结束：
			作用域链中活动对象引用出栈	
			活动对象因为没人引用，释放
	3、闭包：包括不必计算的变量的函数，也就是该函数可以访问函数定义外的变量
			函数变量可以被隐藏于作用域链中，看起来是函数将变量包裹起来
			函数套函数
		3步：
			1、定义外层函数：用来封装一个受保护的局部变量
			2、定义内层函数：用来执行对外层局部变量的操作
			3、外层函数返回内层函数对象，并且外层函数被调用，结果被保存在全局变量中
		判断闭包：
			1、函数嵌套
			2、内层函数使用外层函数的局部变量
			3、内层函数返回外部，在外部调用
		when：反复使用局部变量，避免全局污染
		缺点：占更多内存空间
	4、匿名函数：
		1、匿名函数自调：
			(function(参数列表){
				函数体
				return 返回值；
			})(参数)
		2、匿名函数回调：将函数作为对象传递给其他函数
			由另一个函数自主决定在需要时调用

内置对象：ES标准已经定义好的，由浏览器厂商已经实现的对象
	11：String Number Boolean Array Date Math RegExp Error
		Function Object Global(Window)

Error:
	程序错误：程序无法正常执行的异常状态
	js一但发生错误，就会创建一个Error类型对象
	6中：
		ReferenceError：引用错误，找不到对象
		TypeError：类型错误，错误适用对象或对象方法
		SyntaxError：语法错误
		URLError：url地址错误
		RangeError：范围错误，参数超范围
		EvalError：调用eval函数错误
	错误处理：发生错误时，保证程序不中断
	how:
		try{
			可能会出现错误的代码
		}catch(err){ err中发生错误时会自动收集创建的error对象
			console.log(err.name);
			console.log(err.message);
		}finally{
			无论发生或不发生错误，都执行这段代码
		}
	throw new Error("自定义错误消息")
Array
	程序 =算法+数据结构
		好的数据结构可以极大提高程序运算效率
		相关多个数据，集中存储集中管理
	数组：一组连续变量组成的集合，并且起一个名字
		批量管理多个数据
	创建		赋值		取值
	1、创建：
		var 变量名 = [] 创建一个空数组
		var 变量名 = [值1,值2,值3...] 
		var 变量名 = new Array();
		var 变量名 = new Array(n);
		var 变量名 = new Array(值1,值2,值3...);
	js数组 和其他语言数组区别
		js数组下标越界不会出错
		为不存在位置取值 结果返回undefined
		为不存在位置赋值 会自动创建指定的新下标元素
	数组是对象，
	1、.length
		arr[arr.length-1]任意长度数组中最后一个元素
		改小长度可以删除数组末尾元素
		arr[arr.length]向数组末尾加元素
	2、数组遍历
	3、关联数组：可以自定义下标的名称
		1、创建关联数组：
			创建一个空数组
		2、创建数组同时定义
		String：多个字符组成的一个只读的集合
	凡数组对象中，不改变原对象的api字符串都可以直接拿过来用
String API:
	1、转义字符
	2、大小写转换
		.toUpperCase()转大写
		.toLowerCase()转小写
	3、获取指定位置字符串
		str[i];
		.charAt()
		charCodeAt()
		String.fromCharCode()
	4、在字符串中获取关键词的位置
		indexOf(“关键词”,位置)；
	5、替换	
	6、截取
	7、分割字符串
Math:
	1、取整
	2、平方
	3、求最大最小
	4、随机数
Date:
	
Dom概述：
		DHTML：HTML CSS JS
	DHTML XHTML	XML HTML
		***window:当前浏览器打开的窗口
		***document：当前正在打开的html文档
		navigator：封装了浏览器版本信息和部分设置
		history：封装了当前窗口成功浏览过网页信息和历史记录栈
		location：当前网页窗口的地址栏
		screen：当前显示器
		****event：事件对象
	DOM：核心DOM包含了所有结构化文档（html xml）的通用API；
	DOM基本操作：增删改查
		增加节点、删除节点、修改节点、查找节点
		当网页被加载进内存是，浏览器会为网页创建一个document对象
		网页中所有节点都是document的子节点
		document对象封装了网页中所有的子节的增加、删除、查找
			整个文档：document node
			每个标签：elelment node
			每个文本：text node
			每个html属性：attribute node
			注释：comment node
		Node定义了三个公共属性：
			使用nodeName返回元素节点的大写标签名称，如果是文本节点 返回#text
			使用nodeValue文本节点的文本内容
			使用nodeType 标签：1 文本：3
		节点树												元素树
	.childNodes		获取当前元素所有的子节点				.children
	.firstChild		获取当前元素第一个子节点				.firstElementChild
	.lastChild		获取当前元素最后一个子节点				.lastElementChild
	.parentNode		获取当前元素父节点					.parentElement
	.previousSibling获取当前元素前一个节点					.previousElementSibling
	.nextSibling	获取当前元素后一个节点					.nextElementSibling
	
	document.getElementById();
	document.getElementsByClassName();
	document.getElementsByTagName();
	


			

	


















































