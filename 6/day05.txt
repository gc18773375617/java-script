1、Function对象
	重载
	内存中函数对象
	匿名函数
	闭包
2、错误处理

1、arguments对象：
	重载：程序中定义多个同名参数不同函数
		当调用者调用时 不必区分每个函数参数
		执行时动态选择每个函数执行
	arguments：函数对象内，自动创建接收所有参数的类数组对象
	arguments[i]:
	arguments.length:
2、函数对象
	1、创建函数对象：3种
		1、声明方式：function 函数名(参数列表){函数体;return 返回值}
		2、函数直接量
			var 函数名 = function(参数列表){函数体;return 返回值}
		3、使用new创建函数类型对象
			var 函数名 = new Function("参数1","参数2",..."函数体")
			
		function fun(a,b){return a-b}
		var fun = function(a,b){return a-b}
		var fun = new Function(a,b,return a-b);
		var fun = new Function('a','b','return a-b');
	2、内存中函数对象
		1、创建函数对象：
			函数对象
			作用域链对象：保存了函数对象可用的变量位置的对象
				每个函数都会指向自己的作用域链
		2、函数调用时
			创建一个新的对象
			活动对象：专门保存局部变量的对象
		3、函数调用结束：
			作用域链中活动对象引用出栈	
			活动对象因为没人引用，释放
	3、闭包：包括不必计算的变量的函数，也就是该函数可以访问函数定义外的变量
			函数变量可以被隐藏于作用域链中，看起来是函数将变量包裹起来
			函数套函数
		3步：
			1、定义外层函数：用来封装一个受保护的局部变量
			2、定义内层函数：用来执行对外层局部变量的操作
			3、外层函数返回内层函数对象，并且外层函数被调用，结果被保存在全局变量中
		判断闭包：
			1、函数嵌套
			2、内层函数使用外层函数的局部变量
			3、内层函数返回外部，在外部调用
		when：反复使用局部变量，避免全局污染
		缺点：占更多内存空间
	4、匿名函数：
		1、匿名函数自调：
			(function(参数列表){
				函数体
				return 返回值；
			})(参数)
		2、匿名函数回调：将函数作为对象传递给其他函数
			由另一个函数自主决定在需要时调用













